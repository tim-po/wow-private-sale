import React, { MouseEventHandler, useContext, useState } from 'react'
import './index.scss'
import Heart from '../../../../images/icons/Static/heart'
import ModalContext from '../../../../Context/Modal'
import { BASE_URL } from '../../../../constants'
import { useCookies } from 'react-cookie'
import axios from 'axios'
import {
  useCustomValidationState,
  validationFuncs,
} from '../../../../hooks/useValidationState'
import Button from '../../../ui-kit/Button'

type FeedbackStaticProps = {
  onFeedbackSend: () => void
}

const FeedbackStatic = ({ onFeedbackSend }: FeedbackStaticProps) => {
  const [cookie] = useCookies(['_ym_uid'])
  const { closeModal } = useContext(ModalContext)
  // const [email, setEmail] = useState<string>('')
  // const [text, setText] = useState<string>('')

  const [isFeedbackLeft, setIsFeedbackLeft] = useState<boolean>(false)

  const [[text, setText], isTextValid, validateText] = useCustomValidationState<string>(
    '',
    validationFuncs.hasValue,
    true,
  )
  const [[email, setEmail], isEmailValid, validateEmail] =
    useCustomValidationState<string>(
      '',
      newEmail => validationFuncs.isEmail(newEmail) || newEmail === '',
      true,
    )

  const handleClick: MouseEventHandler<HTMLButtonElement> = () => {
    console.log('click')
    validateText()
    validateEmail()

    if (email && !isEmailValid) {
      return
    }

    if (!text) {
      return
    }

    if (isEmailValid && isTextValid) {
      axios
        .post(
          `${BASE_URL}feedback/`,
          {
            email: email,
            text: text,
            feedback_type: 3,
            user_id: cookie._ym_uid,
          },
          {},
        )
        .then(() => {
          onFeedbackSend()
          setIsFeedbackLeft(true)
        })
        .catch(e => {
          console.log(e)
        })
    }
  }

  return (
    <div className="wrap">
      {!isFeedbackLeft ? (
        <>
          <div className="title">–†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ —Ç–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç?</div>

          <div className="containerText">
            <textarea
              className={`${isTextValid ? '' : 'validation'}`}
              value={text}
              onChange={e => setText(e.target.value)}
              placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
              onBlur={() => validateText()}
            />
            <span className="caption">
              {isTextValid
                ? null
                : '–¢—É—Ç –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –±–µ–∑ –Ω–µ–≥–æ –æ—Ç–∑—ã–≤ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å üôÉ'}
            </span>
          </div>

          <div className="containerEmail">
            <input
              className={`${isEmailValid ? '' : 'validation'}`}
              value={email}
              type={'email'}
              onChange={e => setEmail(e.target.value)}
              placeholder="Email"
              onBlur={() => validateEmail()}
            />
            <span className="caption">{isEmailValid ? null : '–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'}</span>
          </div>

          <div className="containerButton">
            <Button buttonStyle={'secondary'} onClick={closeModal} classNames={['btn']}>
              –û—Ç–º–µ–Ω–∞
            </Button>

            <Button
              buttonStyle={'main'}
              onClick={handleClick}
              classNames={['btn']}
              isDisabled={!text}
            >
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å
            </Button>
          </div>
        </>
      ) : (
        <div className="RequestSent">
          <div className={'rotateWrap'}>
            <div className="heartImg">
              <Heart />
            </div>
            <div>
              <div className="title">–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</div>
              <div className="gratitude">
                –ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å–¥–µ–ª–∞—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å –µ—â–µ —É–¥–æ–±–Ω–µ–µ. –°–ø–∞—Å–∏–±–æ!
              </div>
            </div>
          </div>

          <div className="containerButton">
            <Button buttonStyle={'main'} onClick={closeModal} classNames={['btn']}>
              –ö—Ä—É—Ç–æ
            </Button>
          </div>
        </div>
      )}
    </div>
  )
}

export default FeedbackStatic
