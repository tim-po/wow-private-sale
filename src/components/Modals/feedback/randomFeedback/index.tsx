import React, { useContext, useEffect, useState } from "react";
import "./index.scss";
import axios from "axios";
import Heart from "../../../../images/icons/Static/heart";
import RandomFeedbackOpen from "../../../../images/icons/Static/randomFeedbackOpen";
import Close from "../../../../images/icons/close";
import { BASE_URL } from "../../../../constants";
import { useCookies } from "react-cookie";
import {
  LocalStorageInteraction,
  withLocalStorage,
} from "../../../../utils/general";
import FeedbackGroupIdContext from "../../../../Context/IdGroup";
import { isMobile } from "react-device-detect";
import * as events from "events";
import RandomFeedbackContext from "../../../../Context/RandomFeedback";

const feedbackDataByGroup: {
  [key: number]: { title: string; mapButton: string[] };
} = {
  1: {
    title: "–ß—Ç–æ-—Ç–æ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—ã–∑–≤–∞–ª–æ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏?",
    mapButton: [
      "–ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ üîéÔ∏è",
      "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ/ —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤ üóë",
      "–í—Å–µ —Å–ª–æ–∂–Ω–æ  ü§Ø",
      "–í—Å–µ –ø–æ–Ω—è—Ç–Ω–æ üëå",
    ],
  },
  2: {
    title: "–ö–∞–∫ —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã?",
    mapButton: [
      "–ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ ‚òπÔ∏è",
      "–°—Ç—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ ü§î",
      "–ú–∞–ª–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏  ü§®",
      "–û—Ç–ª–∏—á–Ω–æ üëå",
    ],
  },
  3: {
    title: "–ß—Ç–æ-—Ç–æ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—ã–∑–≤–∞–ª–æ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏? ",
    mapButton: [
      "–í—ã–±–æ—Ä —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ ‚òπÔ∏è",
      "–ö–∞–∫ –ø–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ ü§î",
      "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏  ü§Ø",
      "–í—Å–µ –ø–æ–Ω—è—Ç–Ω–æ üëå",
    ],
  },
  4: {
    title: "–£–¥–æ–±–Ω–æ –ª–∏ —Ç–µ–±–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π ?",
    mapButton: ["–°–ª–æ–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è  ü§Ø", "–ü–æ–Ω—è—Ç–Ω–æ üëå", "–£–¥–æ–±–Ω–µ–µ –≤ —Ç–∞–±–ª–∏—Ü–µ ‚òπÔ∏è"],
  },
  5: {
    title: "–ß—Ç–æ-—Ç–æ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—ã–∑–≤–∞–ª–æ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏? ",
    mapButton: [
      "–ö–∞–∫ –ø–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ  ü§î",
      "–°–ª–æ–∂–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è ‚òπÔ∏è",
      "–í—Å–µ –ø–æ–Ω—è—Ç–Ω–æ üëå",
      "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏  ü§Ø",
      "–°–≤—è–∑—å –º–µ–∂–¥—É –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ üîó",
    ],
  },
  6: {
    title: "–¢—ã —Ö–æ—Ç–µ–ª –±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç?",
    mapButton: [
      "–î–∞, —Å—Å—ã–ª–∫–æ–π –Ω–∞ –¥–∏–ø–ª–æ–º  üîó",
      "–î–∞, –¥–æ–∫—É–º–µ–Ω—Ç–æ–º-—Ç–∞–±–ª–∏—Ü–µ–π üìÑ",
      "–ù–µ—Ç ",
    ],
  },
  7: {
    title: "–ß—Ç–æ –±—ã —Ç—ã –¥–æ–±–∞–≤–∏–ª –≤ –¥–∏–ø–ª–æ–º?",
    mapButton: ["–í—Å–µ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ  üëå", "–ü—Ä–∏–º–µ—Ä—ã –≤–∞–∫–∞–Ω—Å–∏–π üìÑ"],
  },
};

const RandomFeedback = ({ displayForGroup = 0, feedbackType = "" }) => {
  const { isOpenRandomFeedback } = useContext(RandomFeedbackContext);
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [selectedButton, setSelectedButton] = useState<number>(-1);
  const [showFeedback, setShowFeedback] = useState(false);
  const [textDetailed, setTextDetailed] = useState("");
  const { groupId } = useContext(FeedbackGroupIdContext);
  const [cookie] = useCookies(["_ym_uid"]);
  const [isSeeIcon, setIsSeeIcon] = useState(true);
  const [alreadySentFeedbackCount, setAlreadySentFeedbackCount] = useState(
    withLocalStorage(
      { alreadySentFeedbackCount: 0 },
      LocalStorageInteraction.load
    ).alreadySentFeedbackCount
  );

  useEffect(() => {
    document.body.addEventListener("wheel", checkScrollDirection);
    function checkScrollDirection(event: WheelEvent) {
      if (checkScrollDirectionIsUp(event)) {
        setIsSeeIcon(false);
        setShowFeedback(false);
      } else {
        setIsSeeIcon(true);
      }
    }

    function checkScrollDirectionIsUp(event: WheelEvent) {
      if (event.deltaY) {
        return event.deltaY > 0;
      }
      return event.deltaY < 0;
    }
  });

  function sendFeedback() {
    const user = {
      email: "",
      score: selectedButton,
      text: `${feedbackDataByGroup[displayForGroup]["mapButton"][selectedButton]} ${textDetailed}`,
      user_id: cookie._ym_uid,
      feedback_type: displayForGroup,
    };
    axios
      .post(`${BASE_URL}feedback/`, user, {})
      .then((res) => {
        setIsSubmitted(true);
        setSelectedButton(-1);
        setTextDetailed("");
        setAlreadySentFeedbackCount(alreadySentFeedbackCount + 1);
        withLocalStorage(
          { alreadySentFeedbackCount: alreadySentFeedbackCount + 1 },
          LocalStorageInteraction.save
        );
      })
      .catch((err) => {
        console.log(err.response);
      });
  }

  function closeFeedback() {
    setTimeout(() => {
      setShowFeedback(false);
      setIsSubmitted(false);
    }, 100);
  }

  function openFeedback() {
    setShowFeedback(true);
  }
  useEffect(() => {
    setTimeout(() => {
      openFeedback();
    }, 2000);
  }, []);

  if (alreadySentFeedbackCount > 20 || displayForGroup !== groupId) {
    return null;
  }

  return (
    <>
      {!isOpenRandomFeedback ? (
        <div
          onClick={openFeedback}
          className={`container-form-random-feedback ${
            !showFeedback ? "feedbackSmall" : ""
          } ${isSeeIcon ? "" : "hideIcon"}`}
        >
          <RandomFeedbackOpen />
          {!isSubmitted && (
            <div className="form">
              <div className="wrapTitle">
                <span className="title">
                  {feedbackDataByGroup[displayForGroup]["title"]}
                </span>
                <button onClick={() => closeFeedback()}>
                  <Close />
                </button>
              </div>
              <div className="bottomFeedback">
                {feedbackDataByGroup[displayForGroup]["mapButton"].map(
                  (controlTypeName: string, index: any) => {
                    return (
                      <button
                        onClick={() => setSelectedButton(index)}
                        className={`selectButton ${
                          selectedButton === index ? "active" : ""
                        }`}
                      >
                        {controlTypeName}
                      </button>
                    );
                  }
                )}
              </div>

              <div className="containerText">
                <span className="description–°ontainerText">
                  –ò–ª–∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ
                </span>
                <textarea
                  value={textDetailed}
                  onChange={(e) => setTextDetailed(e.target.value)}
                  placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
                  className="first-form"
                />
              </div>
              <div className="possibleNumberFormSubmissions">
                –¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É –µ—â–µ {20 - alreadySentFeedbackCount}{" "}
                —Ä–∞–∑.
              </div>
              <div className="containerButton">
                <button
                  onClick={() => closeFeedback()}
                  className="cancellation "
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button
                  className={`submit ${
                    selectedButton !== -1 || textDetailed !== ""
                      ? ""
                      : "notValid"
                  }`}
                  onClick={sendFeedback}
                >
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </button>
              </div>
            </div>
          )}
          {isSubmitted && (
            <div className="RequestSent">
              <div className="heartImg">
                <Heart />
              </div>
              <div className="title">–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</div>
              <div className="gratitude">
                –ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å–¥–µ–ª–∞—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å –µ—â–µ —É–¥–æ–±–Ω–µ–µ. –°–ø–∞—Å–∏–±–æ!
              </div>
              <div className="containerButton">
                <button className="closeModal" onClick={() => closeFeedback()}>
                  –ö—Ä—É—Ç–æ
                </button>
              </div>
            </div>
          )}
        </div>
      ) : (
        <div></div>
      )}
    </>
  );
};

export default RandomFeedback;
