import React, { useContext, useEffect, useState } from "react";
import BgContext from "../../Context/Background";
import BackButtonContext from "../../Context/BackButton";
import { useSearchParams } from "react-router-dom";
import axios from "axios";
import * as Scroll from "react-scroll";
import { TrajectoryType } from "../../types";
import PercentProgress from "../../components/PercentProgress";
import "./index.scss";
import { BASE_URL } from "../../constants";
import Close from "../../images/icons/close";
import { LocalStorageInteraction, makeEmptyList, withLocalStorage } from "../../utils/general";
import FeedbackGroupIdContext from "../../Context/IdGroup";
import RandomFeedback from "../../components/Modals/feedback/randomFeedback";
import { createStickyBlock, updateStickyBlocks } from "../../utils/stickyHeaders";
import TrajectoryPreview from "../../components/TrajectoryPreview";
import TrajectorySkeleton from "../../components/TrajectoryPreview/TrajectoryPreviewSkeleton";

// CONSTANTS

const randomFeedback = {
  firstOptionSelectButton: [
    "–ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ ü•≤Ô∏è",
    "–°—Ç—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ ü§î",
    "–ú–∞–ª–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏  ü§®",
    "–û—Ç–ª–∏—á–Ω–æ üëå"
  ],
  secondOptionSelectButton: [
    "–í—ã–±–æ—Ä —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ ü•≤Ô∏è",
    "–ö–∞–∫ –ø–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ ü§î",
    "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏  ü§Ø",
    "–í—Å–µ –ø–æ–Ω—è—Ç–Ω–æ üëå"
  ]
};

// DEFAULT FUNCTIONS

const Trajectories = () => {
  const { group_id } = useContext<any>(FeedbackGroupIdContext);
  const [trajectories, setTrajectories] = useState<TrajectoryType[]>([]);
  const { setBg } = useContext(BgContext);
  const { setNewBackButtonProps } = useContext(BackButtonContext);
  const [searchParams] = useSearchParams();

  useEffect(() => {
    setBg("#F1F2F8");

    const professionId = withLocalStorage(
      { professionId: null },
      LocalStorageInteraction.load
    ).professionId;
    setNewBackButtonProps(
      "–í—ã–±–æ—Ä –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ –ø—Ä–µ—Å–µ—Ç–æ–≤",
      `/professionDetails?view=main&id=${professionId}`
    );
    if (trajectories.length === 0) {
      const trajectoryIds = JSON.parse(searchParams.get("ids") || "[]");
      axios
        .get(`${BASE_URL}trajectories/?ids=${trajectoryIds.join(",")}`)
        .then((res) => {
          setTrajectories(res.data);
        });
    }
    let scroll = Scroll.animateScroll;
    scroll.scrollToTop();

    updateStickyBlocks();
  }, []);


  return (
    <div className="pb-3">
      <h1 className="TrajectoryChoiceHeader" {...createStickyBlock(1)}>
        –ì–æ—Ç–æ–≤—ã–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
      </h1>

      <div className={"animationWrap"}>
        <div className="TrajectoriesInfoCard align-items-center">
          <PercentProgress percent={0.8} />
          –ú—ã —Å–æ–±—Ä–∞–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è —Ç–µ–±—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ –ò–¢–ú–û.
          <br />
          –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.
          <button
            className="border-0 pr-0 py-0 hideButton"
            onClick={() => {
              const card = document.querySelector(".–ù–µ");
              if (card) card.classList.toggle("Hidden");
            }}
          >
            <Close width={10} height={10} />
          </button>
        </div>
      </div>


      {trajectories.length ?
        trajectories.map((trajectory) =>
          <TrajectoryPreview trajectory={trajectory}/>
        ) :
        makeEmptyList(5).map(()=>
          <TrajectorySkeleton/>
        )}
      <RandomFeedback displayForGroup={2} />
      <RandomFeedback displayForGroup={3} />
    </div>
  );
};

export default Trajectories;
